--Explore Structure of the database :

SELECT * FROM INFORMATION_SCHEMA.

SELECT * FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'fact_sales'

--Explore the dimensions :

SELECT 
	DISTINCT country			
FROM gold.dim_customers

SELECT 
	DISTINCT category
FROM gold.dim_products

SELECT 					
	DISTINCT category,							
			subcategory
FROM gold.dim_products
GROUP BY 1,2

SELECT 
	MIN(order_date) AS first_order,
	MAX(order_date) AS last_order
FROM gold.fact_sales

-- First order and last order difference
SELECT 
	MIN(order_date) AS first_order,
	MAX(order_date) AS last_order,
	DATE_PART('YEAR',AGE(MAX(order_date),MIN(order_date))) AS DIFFER
FROM gold.fact_sales 

-- Young and Old Customers
SELECT 
	MIN(birthdate) AS young,
	MAX(birthdate) AS oldes,
	DATE_PART('YEAR',AGE(MIN(birthdate),CURRENT_DATE)) AS old_age,
	DATE_PART('YEAR',AGE(MAX(birthdate),CURRENT_DATE)) AS young_age
FROM gold.dim_customers

-- Measures Explore :

SELECT 
	SUM(fact_sales.sales_amount) AS total_sales,
	ROUND(AVG(price),2) AS avg_price,
	SUM(quantity) AS tottal_qty
FROM gold.fact_sales

-- Find the total sales --
SELECT 
	SUM(fact_sales.sales_amount) AS total_sales
FROM gold.fact_sales

-- Find how many items are sold --
SELECT 
	SUM(quantity) AS tottal_qty
FROM gold.fact_sales

-- Find average selling price --
SELECT 
	ROUND(AVG(price),2) AS avg_price
FROM gold.fact_sales

-- Find the total numbers of orders --
SELECT
	COUNT(DISTINCT order_number) AS total_orders
FROM gold.fact_sales

-- Find the total numbers of products --
SELECT 
	COUNT(product_key) AS total_products
FROM gold.dim_products

-- Find total numbers of customer that has placed order --
SELECT 
	COUNT(DISTINCT(customer_key)) AS total_customers
FROM gold.dim_customers


-- Report that shows all metrices of business 

SELECT 'Total_sales' AS Measure_name,
	SUM(fact_sales.sales_amount) AS  Measure_value
FROM gold.fact_sales
UNION ALL
SELECT 'Total_quantity', 
	SUM(quantity) AS tottal_qty
FROM gold.fact_sales
UNION ALL
SELECT 'Average_price',
	ROUND(AVG(price),2) AS avg_price
FROM gold.fact_sales
UNION ALL
SELECT 'Total_orders',
	COUNT(DISTINCT order_number) AS total_orders
FROM gold.fact_sales
UNION ALL
SELECT 'total_products',
	COUNT(product_key) AS total_products
FROM gold.dim_products
UNION ALL
SELECT 'total_customers',
	COUNT(DISTINCT(customer_key)) AS total_customers
FROM gold.dim_customers

-- Questions: Measures byb Dimensins - Magnitude Analysis

-- Find the total customers by countries
SELECT 
	country,
	COUNT(*) AS total_customers
FROM gold.dim_customers
GROUP BY 1
ORDER BY COUNT(*) DESC;

-- Find total customers by gender
SELECT 
	gender,
	COUNT(*) AS total_customers
FROM gold.dim_customers
GROUP BY 1;

-- Find total product by category
SELECT 
	category,
	COUNT(product_id) AS total_product
FROM gold.dim_products
GROUP BY 1;

-- Find the average cost in each category
SELECT 
	category,
	ROUND(AVG(cost),2) AS avg_cost
FROM gold.dim_products
GROUP BY 1;

-- Find the total revenue generated by each category
SELECT 
	p.category,
	SUM(s.sales_amount) AS total_revenue
FROM gold.fact_sales AS s
LEFT JOIN gold.dim_products p
ON s.product_key = p.product_key
GROUP BY 1;

--Find the total revenue by each customers
SELECT 
	c.first_name,
	SUM(s.sales_amount) AS total_revenue
FROM gold.fact_sales AS s
LEFT JOIN gold.dim_customers c
ON s.customer_key = c.customer_key
GROUP BY 1
ORDER BY SUM(s.sales_amount) DESC ;

-- What is the distribution of sold items across countries--
SELECT 
	c.country,
	SUM(s.quantity) AS total_qty
FROM gold.dim_customers c
LEFT JOIN gold.fact_sales s
ON c.customer_key = s.customer_key
GROUP BY 1;

-- Ranking Analysis : 

-- Which 5 products generate the highest revenue
SELECT 
	product_name,
	highest_revenue
FROM
(SELECT 
	p.product_name,
	SUM(s.sales_amount) AS highest_revenue
FROM gold.dim_products p
LEFT JOIN gold.fact_sales s
ON p.product_key = s.product_key
GROUP BY 1)T
WHERE highest_revenue IS NOT NULL
ORDER BY highest_revenue DESC
LIMIT 5;
-------------------------------
/*
SELECT 
	p.product_name,
	COALESCE(SUM(s.sales_amount),0) AS highest_revenue,
	RANK() OVER(ORDER BY SUM(s.sales_amount) DESC) AS revenue_rank
FROM gold.dim_products p
LEFT JOIN gold.fact_sales s
ON p.product_key = s.product_key
GROUP BY 1
ORDER BY highest_revenue DESC
*/

-- What are worst performing product in terms of sales
SELECT 
	product_name,
	highest_revenue
FROM
(SELECT 
	p.product_name,
	SUM(s.sales_amount) AS highest_revenue
FROM gold.dim_products p
LEFT JOIN gold.fact_sales s
ON p.product_key = s.product_key
GROUP BY 1)T
WHERE highest_revenue IS NOT NULL
ORDER BY highest_revenue 
LIMIT 5;

